//
// Created by ROG on 25/06/2025.
//

#ifndef BACKEND_ENTITY_TRANSACTION_H
#define BACKEND_ENTITY_TRANSACTION_H
#include "../../../include/bac_lib/orcl/base_pobject.h"
#include "config/database.h"

class TransactionResponseDto;
class Transaction final : public bac_lib::orcl::BasePObject<Transaction> {
 public:
  using BasePObject::BasePObject;
  using BasePObject::ReadSQL;
  using BasePObject::WriteSQL;

  enum class Type { kTopUp = 0, kWithdrawal = 1, kPurchase = 2 };

  enum class Status {
    kInitiated = 0,
    kPending = 1,
    kProcessing = 2,
    kFailed = 3,
    kRefunded = 4,
    kSuccess = 5
  };

  enum class PaymentMethod {
    kBankTransfer = 0,
    kCreditCard = 1,
    kMomo = 2,
    kZaloPay = 3,
  };

  static constexpr auto kSchema = config::database::kSchema;
  static constexpr auto kTableName = "TABLE_TRANSACTION";
  static constexpr auto kTypename = "TYPE_TRANSACTION";
  static constexpr auto kPrimaryKey =
      "id_";  // is UUID and automatically generated by database

  Transaction(double amount, Type type, Status status,
              const bac_lib::type::Date &created_at,
              const bac_lib::type::Date &approved_at,
              PaymentMethod payment_method, const std::string &idempotency_key,
              int client_id);

  void readSQL(oracle::occi::AnyData& streamOCCI_) noexcept override;
  void writeSQL(oracle::occi::AnyData& streamOCCI_) noexcept override;

  template <typename Self>
  auto&& GetId(this Self&& self) noexcept {
    return std::forward<Self>(self).id_;
  }


 private:

  friend TransactionResponseDto;

  std::string id_;
  double amount_;
  std::string currency_ = "VNƒê";
  Type type_;
  Status status_{Status::kInitiated};
  bac_lib::type::Date created_at_;
  bac_lib::type::Date approved_at_;
  PaymentMethod payment_method_;
  std::string idempotency_key_;

  int client_id_; // The ID of the client who initiated the transaction
};

#endif  // BACKEND_ENTITY_TRANSACTION_H
